1) Write a program to accepts two numbers from stdin and find all the odd as well as even
numbers present in between them.

import java.util.*;
class Oddeven
{

public static void main(String[] args)
{
int[] odd=new int[100];
int[] even=new int[100];
int x=0,y=0;
Scanner sc=new Scanner(System.in);
int i=sc.nextInt();
int n=sc.nextInt();
for(int j=i;j<=n;j++)
{
if(j%2==0)
{
even[x]=j;
x++;
}
else
{
odd[y]=j;
y++;
}
}
System.out.println("Odd numbers are:");
for(int k=0;k<odd.length;k++)
{
    if(odd[k]!=0)
System.out.println(odd[k]);
}
System.out.println("Even numbers are:");
for(int k=0;k<even.length;k++)
{
     if(even[k]!=0)
System.out.println(even[k]);
}
}
}

2) Joe is scared to go to school. When her dad asked the reason, joe said she is unable to
complete the task given by her teacher. The task was to find the “first 10 multiples” of the
number entered from stdin.

import java.util.*;
class Multiple
{

public static void main(String[] args)
{

Scanner sc=new Scanner(System.in);
int n=sc.nextInt();
for(int m=1;m<=10;m++)
{
    System.out.println(n+"*"+m+"="+(n*m));
}
}
}


3) Write a program consisting method sum() and demonstrate the concept of method
overloading using this method.

import java.util.*;
class Sum{  
static int sum(int x,int y)
{ 
return x+y;
}  
static int sum(int x,int y,int z)
{
return x+y+z;
}  
}  
class Overloading{  
public static void main(String[] args){  
System.out.println(Sum.sum(10,20));  
System.out.println(Sum.sum(30,1,8));  
}}  

Methods can have varying number of arguments but the method name should be the same. 
Return type can be either same or different. This is called method overloading.
In this example, the overloading method is sum. The number of parameters present in the sum
methods are 2 and 3. But the return type is integer in both the cases. So overloading methods
can have different number of arguments and the return type can be the same.
